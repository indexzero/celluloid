group jcelluloid;

variableDeclaration(type, name, init) ::= "<type> <name> <init>"
initializer(exp)                      ::= " = <exp>"

idList(ids)                           ::= "<ids:{ id | <id.text> }; separator=\", \">"
variableList(vars)                    ::= "<vars:{ var | <var.st> }; separator=\", \">"
expressionList(exps)                  ::= "<exps:{ exp | <exp.st> }; separator=\", \">"

functionHeader(name,args)             ::= "public void <name> (<args>)"
functionDefintion(header, block)      ::=
<<
<header> "{"
  <block>
"}"
>>
functionBlock(statements)             ::= "<statements:{ statement | <statement.st> }; separator\"\\n\">"
functionCall(name, args)              ::=  "<name>(<args>);"

predicateHeader(name, args)           ::= "public bool <name> (<args>)"
predicateDefinition (header, block)   ::= << <header> "{" <block> "}" >>
predicateBlock(block, exp)            ::= "<block> returns <exp>"
predicateCall(name,args)              ::= "<name>(<args>);"

eventDefinition(name)                 ::= "public class name extends event { }"

constraintDefinition(name, requires)  ::= "public interface <name> <requires> { TODO: Members }"
constraintList( ids )                 ::= "implements <ids>"

deviceDefinition(name, accepts)       ::= "public class <name> extends device <accepts> { TODO: Members }"

timelineDeclaration(name)             ::= "timeline <name> = new timeline();"
