group jcelluloid;

announcementDefinition()              ::= ""
eventDefinition(name)                 ::= "public class <name> extends event { /* <name> event */ }"

constraintDefinition(
 name, require,
 requires, block)                     ::=
<<
public interface <name> <requires> {
  <block>
}
>>

deviceDefinition(name, accepts)       ::=
<<
public class <name> <accept> <accepts> {
 <block>
}
>>

functionHeader(name, args)            ::= "<name>(<args>)"
functionDefintion(name, args, block)  ::=
<<
public void <name> (<args>) {
  <block>
}
>>

predicateHeader(name, args)           ::= "public bool <name> (<args>)"
predicateDefintion(name, args, block) ::=
<<
public void <name> (<args>) {
  <block>
}
>>
predicateBlock(statements, returns) ::=
<<
  <statements>
  return <returns>;
>>

inStatement(name, block)              ::= ""
ifStatement()                         ::= ""
whenEveryStatement()                  ::= ""

constraintFunctionCall(
 timeline, target,
 type, function,
 time, args)                          ::=
<<
<timeline>.addConstraintFunction(
  new ConstraintFunction(<target>, new ReactiveNumber(<time>)) {
                public void execute() {
                    ((<type>) input).<function>(<args.st>);
                }
            }
        );
>>

functionPredicateCall()               ::= ""

idList(ids)                           ::= "<ids:{ id | <id.text> }; separator=\", \">"
variableList(vars)                    ::= "<vars:{ var | <var.st> }; separator=\", \">"
expressionList(exps)                  ::= "<exps:{ exp | <exp.st> }; separator=\", \">"
statementList(statements)             ::= "<statements:{ statement | <statement.st> }; separator=\"\n\">"

variableDeclaration(type, name, init) ::= "<type> <name> <init>"
timelineDeclaration(name)             ::= "timeline <name> = new timeline();"
initializer(exp)                      ::= " = <exp>"
expression()                          ::= ""
logicalORExpression                   ::= ""
primaryExpression                     ::= ""
